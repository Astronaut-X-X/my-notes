import{_ as o,M as l,p as a,q as i,R as e,t,N as r,a1 as n}from"./framework-efe98465.js";const c={},s=e("h1",{id:"tcp",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tcp","aria-hidden":"true"},"#"),t(" TCP")],-1),p={href:"https://www.rfc-editor.org/rfc/rfc793",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.rfc-editor.org/rfc/rfc9293#name-status-of-this-memo",target:"_blank",rel:"noopener noreferrer"},_=n("<p>TCP 面向连接 指的是 TCP是通过3次握手、4次挥手创建的TCP连接。 3次握手的具体流程如下： 1、由客户端发出建立请求数据报 2、由服务端接收到数据包后返回响应 3、客户端再次接收到响应数据报后，返回响应 建立TCP连接，</p><p>注意点： TCP连接是建立在IP协议之上的，也就是说，没次TCP的数据报传输过程中通过的数据链路可能不相同。 TCP长连接是通过双方维持一个Sokcet保持的，Socket分别记录了对方和本机的IP地址和端口号。</p><p>数据包构成</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td><td>用户头部</td><td>用户数据</td></tr><tr><td></td><td></td><td>TCP首部</td><td>应用数据</td><td>应用数据</td></tr><tr><td></td><td>IP首部</td><td>TCP首部</td><td>应用数据</td><td>应用数据</td></tr><tr><td>以太网首部</td><td>IP首部</td><td>TCP首部</td><td>应用数据</td><td>应用数据</td></tr></tbody></table><p>TCP 三次握手、四次挥手</p><ul><li>确认是双工、保证可靠性</li></ul><p>为什么 time_wait 需要等待 2MSL</p><ul><li>MSL： Maximum Segment Lifetime，30s - 1min</li><li>保证TCP协议的全双工连接能够可靠关闭</li><li>保证这次连接的重复数据段从网络中消失</li></ul><p>TCP为什么需要流量控制（UDP）</p><ul><li>由于通讯双方，网速不同。通讯方任意一方发送过快都会导致对方消息处理不过来，所以就需要把数据存储到缓冲区中</li><li>如果缓冲区满了，发送方还在疯狂发送，那接收方只能把数据包丢弃，因此我们需要控制发送速率</li><li>我们缓冲区的剩余大小称之为接受窗口</li></ul><p>TCP为什么需要拥塞控制</p><ul><li>慢开始和拥塞避免</li><li>快重传和快恢复</li></ul>",12);function P(f,C){const d=l("ExternalLinkIcon");return a(),i("div",null,[s,e("p",null,[t("TCP 传输控制协议(Transmission Control Protocal),是一种面向连接的、可靠的、基于字节流的传输层控制协议。最早由"),e("a",p,[t("RFC 793"),r(d)]),t(" 决议定义，如今已近在"),e("a",h,[t("RFC 9293"),r(d)]),t("中被重新定义。")]),_])}const T=o(c,[["render",P],["__file","tcp.html.vue"]]);export{T as default};
