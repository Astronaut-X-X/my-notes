import{_ as i,p as l,q as a,a1 as e}from"./framework-efe98465.js";const r={},h=e('<h1 id="vim" tabindex="-1"><a class="header-anchor" href="#vim" aria-hidden="true">#</a> Vim</h1><h3 id="开始编辑" tabindex="-1"><a class="header-anchor" href="#开始编辑" aria-hidden="true">#</a> 开始编辑</h3><ul><li>使用 i 进入编辑模式，开始输入文字</li><li>i 表示（insert），a（append），o（open a line below）</li><li>使用 Esc 又可以回到 normal 模式。使用 :wq 保存退出</li><li>I insert before line A append after line O open a line above</li></ul><h3 id="normal-模式" tabindex="-1"><a class="header-anchor" href="#normal-模式" aria-hidden="true">#</a> normal 模式</h3><ul><li>进入 Vim 默认是 normal （普通）模式。使用 Esc 从插入回到普通模式</li><li>普通模式下可以进行各种命令操作和移动</li><li>大多数情况下是在浏览而不是输入，所以 Vim 默认是 normal 模式</li></ul><h3 id="insert-模式" tabindex="-1"><a class="header-anchor" href="#insert-模式" aria-hidden="true">#</a> insert 模式</h3><ul><li>使用 i 表示（insert），a（append），o（open a line below）进入插入模式</li><li>使用 Esc 退出插入模式到 normal 模式</li></ul><h3 id="command-模式" tabindex="-1"><a class="header-anchor" href="#command-模式" aria-hidden="true">#</a> command 模式</h3><p>normal 模式下输入 : 之后执行命令，例如：保存 :w 退出 :q</p><ul><li>例如：分屏 :vs（vertical split） , :sp（split）</li><li>例如：%s /foo/bar/g 进行全局替换</li></ul><h3 id="visual-模式" tabindex="-1"><a class="header-anchor" href="#visual-模式" aria-hidden="true">#</a> visual 模式</h3><ul><li>normal 模式下按下 v 进入 visual 模式</li><li>使用 V 选择行</li><li>使用 ctrl + v 进行方块选择</li></ul><h3 id="快速纠错" tabindex="-1"><a class="header-anchor" href="#快速纠错" aria-hidden="true">#</a> 快速纠错</h3><ul><li>进入 insert 模式 （终端下也适用）</li><li>ctrl + h 删除前一个字符，ctrl + w 删除前一个单词，ctrl + u 删除当前行</li><li>ctrl + a 光标前移 ctrl + e 光标移到末尾 ctrl + b 光标前移 ctrl + f 光标后移</li></ul><h3 id="光标移动" tabindex="-1"><a class="header-anchor" href="#光标移动" aria-hidden="true">#</a> 光标移动</h3><ul><li>使用 H J K L 移动光标往 左 下 上 右 移动</li><li>w/W 移动到 word/WORD 开头， e/E 移动到 word/WORD 尾部</li><li>b/B 回到上个word/WORD 的开头，理解为 backword</li><li>word 指的是以非空白字符分割的单词，WORD 以空白字符分割的单词</li></ul><h3 id="行间搜索" tabindex="-1"><a class="header-anchor" href="#行间搜索" aria-hidden="true">#</a> 行间搜索</h3><ul><li>使用 f{char} 可以移动到 char 字符上，t 移动到 char 的前一个字符上</li><li>如果第一次没搜索到，可以使用 分号(😉/逗号(,) 继续搜索该行下一个/上一个</li><li>大写的 F 表示反过来搜索前面的字符</li></ul><h3 id="水平移动" tabindex="-1"><a class="header-anchor" href="#水平移动" aria-hidden="true">#</a> 水平移动</h3><ul><li>0 移动到行首的第一个字符，^ 移动到第一个非空白字符</li><li>$ 移动到行尾，g_ 移动到行尾非空白字符</li></ul><h3 id="段落移动" tabindex="-1"><a class="header-anchor" href="#段落移动" aria-hidden="true">#</a> 段落移动</h3><ul><li>使用 （） {} [] 进行段落间的移动</li></ul><h3 id="页面移动" tabindex="-1"><a class="header-anchor" href="#页面移动" aria-hidden="true">#</a> 页面移动</h3><ul><li>使用 gg/G 移动到页尾部，使用 ctrl + o 快速反回上的位置</li><li>使用 H M L 移动到屏幕的开头 中间 结尾</li><li>使用 ctrl + u / ctrl + f 上下翻页，zz 屏幕</li></ul><h3 id="快速删除" tabindex="-1"><a class="header-anchor" href="#快速删除" aria-hidden="true">#</a> 快速删除</h3><ul><li>Vim 在 normal 模式下使用 x 快速删除一个单词</li><li>使用 d （delete） 配合文本对象快速删除一个单词 daw （d around word）</li><li>d 和 x 都可以搭配数字来执行多次</li></ul><h3 id="快速修改" tabindex="-1"><a class="header-anchor" href="#快速修改" aria-hidden="true">#</a> 快速修改</h3><ul><li>常用有三个，r (replace), c(change), s(substitute)</li><li>normal 模式下使用 r 可以替换一个字符 s 替换并进入插入模式</li><li>使用 c 配合文本对象，可以快速进行修改</li></ul><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h3><ul><li>使用/或者？进行前向或反向搜索</li><li>使用n/N 跳转到下一个或者上一个匹配</li><li>使用 * 或者 # 进行当前单词的前向和后向匹配</li></ul><h3 id="替换命令" tabindex="-1"><a class="header-anchor" href="#替换命令" aria-hidden="true">#</a> 替换命令</h3><p>subsitute 命令允许我们查找并替换掉文本，并支持正则式</p><ul><li>:[range]s[ubsitute]/{pattern}/{string}/[{flags}]</li><li>range 表示范围 例如 :10,20 表示 10-20行，% 表示全部</li><li>patternn 是要替换的模式，string 是替换后的文本</li><li>Flags 有几个常用的标志</li><li>g(global) 表示全局范围内执行</li><li>c(confirm) 表示确认，可以确认或拒绝修改</li><li>n(number) 报告匹配到的次数而不是替换，可以用来查询匹配的次数</li></ul><h3 id="多文件操作" tabindex="-1"><a class="header-anchor" href="#多文件操作" aria-hidden="true">#</a> 多文件操作</h3><ul><li>Buffer 是指打开的一个文件的内存缓冲区</li><li>窗口是 Buffer 可视化的分割区域</li><li>Tab 可以组织窗口为一个工作区</li></ul><h3 id="buffer-切换" tabindex="-1"><a class="header-anchor" href="#buffer-切换" aria-hidden="true">#</a> Buffer 切换</h3><p>如何在 buffer 间切换呢</p><ul><li>使用 :ls 会列举当前缓冲区，然后使用 :b n 跳转到第 n 个缓冲区</li><li>:bpre :bnext :bfirst :blast</li><li>或者用 :b buffer_name 加上 tab 补全来跳转</li></ul><h3 id="window-窗口" tabindex="-1"><a class="header-anchor" href="#window-窗口" aria-hidden="true">#</a> Window 窗口</h3><p>窗口是可视化的分割区域</p><ul><li>一个缓冲区可以分割成多个窗口，每个窗口也可以打开不同缓冲区</li><li>&lt;Ctrl+w&gt;s 水平分割， &lt;Ctrl+w&gt;v 垂直分割。或者 :sp 和 :vs</li><li>每个窗口可以继续被无限分割（取决于你的屏幕大小）</li><li>切换窗口的命令使用 Ctrl + w (window)作为前缀 命令 用途 &lt;C-w&gt;w 在窗口间循环切换 &lt;C-w&gt;h 切换到左边窗口 &lt;C-w&gt;j 切换到下面窗口 &lt;C-w&gt;k 切换到上面窗口 &lt;C-w&gt;l 切换到右边窗口 &lt;C-w&gt;x 交换窗口位置</li></ul><h3 id="tab-标签页" tabindex="-1"><a class="header-anchor" href="#tab-标签页" aria-hidden="true">#</a> Tab （标签页）</h3><ul><li>使用 :tabnew file_name 打开新标签页</li><li>使用 gt 切换到下个标签页 使用 gT 切换到上个标签页</li><li>使用 &lt;Ctrl+w&gt;c (close) 关闭当前活动的标签页</li><li>:tabonly 保留当前标签页</li><li>:tabclose 关闭当前标签页</li></ul><h3 id="backspace-模式" tabindex="-1"><a class="header-anchor" href="#backspace-模式" aria-hidden="true">#</a> backspace 模式</h3><ul><li>使用 :set backspace={mode}</li></ul><h3 id="terminal-开启" tabindex="-1"><a class="header-anchor" href="#terminal-开启" aria-hidden="true">#</a> Terminal 开启</h3><ul><li>使用 :term 开启一个命令行（注意：vim 版本需要大于等于8.1）</li></ul>',47),d=[h];function n(t,s){return l(),a("div",null,d)}const u=i(r,[["render",n],["__file","index.html.vue"]]);export{u as default};
